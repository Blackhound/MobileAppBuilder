<?xml version="1.0"?>

<project name="TranslatorUnitTest" default="regression" basedir=".">

  <!-- set global properties for this build -->

  <property file="build.properties"/>

  <property name="debug" value="on"/>
  <property name="deprecation" value="off"/>

  <import file="build.xml"/>

  <path id="cobertura.classpath">
    <fileset dir="${cobertura}">
      <include name="cobertura.jar" />
      <include name="lib/**/*.jar" />
    </fileset>
  </path>

  <taskdef classpathref="cobertura.classpath" 
	   resource="tasks.properties"/>

  <property name="instrumented" location="instrumented"/>
  <property name="coverage.xml" location="coverage-xml"/>
  <property name="coverage.html" location="coverage-html"/>

  <target name="regression" depends="translator"> 
    <junit printsummary="yes"
	   showoutput="no"
	   outputtoformatters="yes"
	   fork="yes" 
	   haltonfailure="yes">
      <classpath location="${classes}"/>
      <classpath refid="compile.classpath"/>
      <formatter type="plain"/>
      <test name="xj.translate.test.TranslatorTest"/>
    </junit>
  </target>   

  <target name="make" depends="regression"> 
    <junit printsummary="yes" fork="yes" haltonfailure="yes">
      <classpath location="${classes}"/>
      <classpath refid="compile.classpath"/>
      <formatter type="plain"/>
      <test name="xj.translate.test.TranslatorTestMake"/>
    </junit>
  </target>   

  <target name="instrument" depends="prepare,translator">
    <!--
	Remove the coverage data file and any old instrumentation.
    -->
    <delete file="cobertura.ser"/>
    <delete dir="${instrumented}" />
    
    <!--
	Instrument the application classes, writing the
	instrumented classes into ${build.instrumented.dir}.
    -->
    <cobertura-instrument todir="${instrumented}">
      <!--
	  The following line causes instrument to ignore any
	  source line containing a reference to log4j, for the
	  purposes of coverage reporting.
      -->
      <ignore regex="org.apache.log4j.*" />
      
      <fileset dir="${classes}">
	<!--
	    Instrument all the application classes, but
	    don't instrument the test classes.
	-->
	<include name="**/*.class" />
	<exclude name="**/*Test.class" />
	<exclude name="**/*Test$*.class" />
      </fileset>
    </cobertura-instrument>
  </target>
  
  <target name="test2" depends="prepare,translator">
    <junit printsummary="yes" fork="yes" haltonfailure="yes">
      <!--
	  Note the classpath order: instrumented classes are before the
	  original (uninstrumented) classes.  This is important.
      -->
      <classpath location="${instrumented}" />
      <classpath location="${classes}" />
      <classpath refid="compile.classpath"/>
      <!--
	  The instrumented classes reference classes used by the
	  Cobertura runtime, so Cobertura and its dependencies
	  must be on your classpath.
      -->
      <classpath refid="cobertura.classpath" />
      
      <formatter type="plain" />
      <test name="xj.translate.test.TranslatorTest"/>
    </junit>
  </target>
  
  <target name="coverage-report-xml">
    <!--
	Generate an XML file containing the coverage data using
	the "srcdir" attribute.
    -->
    <cobertura-report srcdir="${src}" destdir="${coverage.xml}" format="xml" />
  </target>
  
  <target name="coverage-report-html">
    <!--
	Generate a series of HTML files containing the coverage
	data in a user-readable form using nested source filesets.
    -->
    <cobertura-report srcdir="${src}" destdir="${coverage.html}"/>
  </target>
  
  <target name="coverage" depends="translator,instrument,test2,coverage-report-xml,coverage-report-html" 
	  description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports."/>

</project>
