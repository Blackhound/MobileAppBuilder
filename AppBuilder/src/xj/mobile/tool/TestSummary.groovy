package xj.mobile.tool

import groovy.xml.MarkupBuilder

import xj.mobile.util.NDBuilder
import xj.mobile.tool.Lang

import static xj.mobile.util.CommonUtils.decodeAttributeValue

public class TestSummary { 

  static String testdir = 'test'
  static String base = 'test/output'
  static String androidOutput = 'Screenshots/Android'
  static String iOSOutput = 'Screenshots/iOS'

  static String androidCode = 'gen/Platform.Android'
  static String iOSCode = 'gen/Platform.iOS'

  static String syntax = 'scripts/syntaxhighlighter_Evolved_3.1.3-sh-v2'

  static String natural = 'scripts/NaturalDocs'

  static boolean framed = false 
  static boolean tutorial = false 

  static boolean widgetIndex = true 
  static boolean attributeIndex = true 


  static String pageTitle = 'Mobile App Builder Test Output' 
  static String footerText = 'Copyright &copy; 2014 Generated by Mobile App Builder'

  static void main(args) { 
	if (args) { 
	  println args
	  for (a in args) { 
		if (a == '-framed') framed = true
		else if (a == '-tutorial') tutorial = true
	  }
	}

	def sections = []
	def files = []
	if (tutorial) { 
	  sections = [ 'Tutorials' : '[_a-zA-Z]*.madl' ]
	  testdir = testdir + '/Tutorials'
	  base = 'test/Tutorials/output'

	  widgetIndex = false
	  attributeIndex = false

	  def flist = [ 
		'Hello', 'Widgets', 'Widgets+Option',
		'Actions', 'ImplicitActions', 
		'Form', 
		'TipCalculator', 'TipCalculator2', 'TipCalculator3', 
		'Tabs', 
		'MultiViews', 'MultiViews2', 
		'Navigation', 'Navigation2', 
		'FormAction',
		'ListViews',
		'WorldCities',  
		'EuropeanCountries', 'EuropeanCountries+Option', 
		'EuropeanUnion',
	  ] 
	  files << flist

	  androidOutput = 'Screenshots/AndroidNS/Tutorials'
	  iOSOutput = 'Screenshots/iOS7/Tutorials'

	  pageTitle = 'Mobile App Builder Tutorial Examples' 

	} else { 
	  sections = [ 
		'Android & iOS': '(app|Button|Control|Hello)', 
		'Android': 'android', 
		'iOS': 'ios', 
		'Errors': 'test' 
	  ]
	  sections.each { title, prefix ->
		def flist = []
		def files1 = new File(testdir).list(
		  {d, f-> f ==~ "${prefix}[_a-z]*[0-9]*[a-z]*.madl" } as FilenameFilter
		).toList().each { f -> 
		  flist <<  f[0..-6] 
		}
		files << flist.sort()
	  }
	}

    prepare()
	buildAll(sections, files)

	System.exit(0)
  }

  static buildAll(sections, files) { 
	println "Generate test summary in ${base}"

	new File(base).mkdirs()
	if (framed) { 
	  buildFramedIndexPage()
	  buildTocPage(sections, files)
	} 

	buildSummaryPage(sections, files)
	buildWidgetAndAttributeIndexPage(sections, files)
	buildPages(sections, files)
  }

  static buildFramedIndexPage() { 
    def indexFile = new FileWriter(base + '/index.html')
    def indexBuilder = new MarkupBuilder(indexFile)    
    indexBuilder.html { 
      head { 
		meta('http-equiv': 'Content-Type', content: 'text/html; charset=UTF-8')
		title pageTitle
      }
      frameset('cols': '185,*') { 
		frame(name: 'toc', src: 'toc.html')
		frame(name: 'display', src: 'summary.html')
      }
    }
    indexFile.close()
  }

  static buildTocPage(sections, files) { 
    def tocFile = new FileWriter(base + '/toc.html')
	def tocBuilder = new NDBuilder(tocFile)
    tocBuilder.html { 
	  ndhead('Menu')
	  ndbody(framed) { 
		buildMenu(tocBuilder, sections, files)
	  }
    }
    tocFile.close()
  }

  static buildSummaryPage(sections, files) { 
	def fileMap = getFileMap()
    def summaryFile = new FileWriter(base + (framed ? '/summary.html' : '/index.html'))
    def summaryBuilder = new NDBuilder(summaryFile)    
    summaryBuilder.html { 
	  ndhead(pageTitle + ' -- Summary') 
	  ndbody(framed) { 
		div(id: 'Content') { 
		  ndtopic('Summary', 'Summary', 1, null)
		  int scount = 1
		  sections.each { title, prefix ->
			if (title != 'Errors') { 
			  ndgroup(title, prefix, 2) { mkp.yieldUnescaped(' ') }

			  files[scount-1].each { fname ->
				def wmap = fileMap[fname]
				if (wmap) { 
				  ndtopic(fname, fname, 3) { 
					wmap.keySet().sort().each { wname ->
					  def attrs = wmap[wname]
					  ul { 
						if (wname != 'app') { 
						  def attrs0 = attrs.name.unique().findAll{ it[0] != '#' && it != 'id'}.sort()
						  li("${wname}: ${attrs0}") { mkp.yieldUnescaped(' ') }
						}
					  }
					}
				  }
				}
			  }
			  
			}
			scount++
		  }
		}

		if (!framed) { 
		  footer(footerText)
		  buildMenu(summaryBuilder, sections, files, framed ? 'summary' : 'index')
		}
	  }
    }
    summaryFile.close()
  }

  static buildWidgetAndAttributeIndexPage(sections, files) {
	def attrMap = getAttributesMap() 
	if (widgetIndex)
	  buildWidgetIndexPage(sections, files, attrMap)
	if (attributeIndex)
	  buildAttributeIndexPage(sections, files, attrMap)
  }

  static buildWidgetIndexPage(sections, files, attrMap) {
    def widgetIndexFile = new FileWriter(base + '/widget-index.html')
    def windexBuilder = new NDBuilder(widgetIndexFile)    
    windexBuilder.html { 
	  ndhead(pageTitle + ' -- Widget Index') 
	  ndbody(framed) { 
		div(id: 'Content') { 
		  ndtopic('Widget Index', 'widget-index', 1, null)
		  
		  attrMap.keySet().sort().each { widget -> 
			if (widget != 'app') { 
			  def wmap = attrMap[widget] 
			  ndtopic(widget, widget, 3) { 
				//mkp.yieldUnescaped(wmap)
				h4('Used in') { mkp.yieldUnescaped(' ') }

				//p(class: 'CParagraph') { 
				ul { 
				  wmap.file.unique().sort().each { f -> 
					a(href: "${f}.html", f)
				  }
				}
				
				def usedin =[:]
				wmap.each { attr ->
				  if (attr.name != 'id' && attr.name[0] != '#') { 
					def entry = usedin[attr.name]
					if (!entry) { 
					  entry = [] as Set
					}
					entry << attr.file
					usedin[attr.name] = entry
				  }
				}

				h4('Attributes') { mkp.yieldUnescaped(' ') }

				table(border: '0', cellspacing: '0', cellpadding: '0', class: 'CDescriptionList') { 
				  tbody { 
					usedin.keySet().sort().each { attr -> 
					  tr { 
						td(class: 'CDLEntry') { 
						  mkp.yield(attr)
						}
						td(class: 'CDLDescription') { 
						  usedin[attr].sort().each { f -> 
							a(href: "${f}.html", f)
						  }
						}
					  }
					}
				  }
				}
			  }

			}
		  }

		}

		if (!framed) { 
		  footer(footerText)
		  buildMenu(windexBuilder, sections, files, 'widget-index')
		}
	  }
	}
	widgetIndexFile.close()
  }

  static buildAttributeIndexPage(sections, files, attrMap) { 
	// build attribute index
    def attrIndexFile = new FileWriter(base + '/attr-index.html')
    def attrIndexBuilder = new NDBuilder(attrIndexFile)    
    attrIndexBuilder.html { 
	  ndhead(pageTitle + ' -- Attribute Index') 
	  ndbody(framed) { 
		div(id: 'Content') { 
		  ndtopic('Attribute Index', 'attr-index', 1, null)
		  
		  def allAttrNames = [] as Set
		  attrMap.values().each {
			allAttrNames.addAll(it.name)
		  }		  

		  p { 
			ndsummary('Attributes', allAttrNames.findAll{ it != 'id' &&it != 'classes' && it[0] != '#'}
					  .sort().collect{ [it, it , null ]})
		  }

		  br()

		  allAttrNames.sort().each { name -> 
			if (name && name != 'id' && name != 'classes' && name[0] != '#') { 
			  def usedin =[:]
			  attrMap.each { widget, wmap -> 
				def entry = [] as Set
				wmap.each { attr ->
				  if (attr.name == name) { 
					//if (attr.type == 'Closure') attr.value = null
					entry << attr.file
				  }
				}
				if (entry)
				  usedin[widget] = entry
			  }
			  ndtopic(name, name, 3) { mkp.yieldUnescaped(' ')
				table(border: '0', cellspacing: '0', cellpadding: '0', class: 'CDescriptionList') { 
				  tbody { 
					usedin.keySet().sort().each { widget -> 
					  tr { 
						td(class: 'CDLEntry') { 
						  mkp.yield(widget)
						}
						td(class: 'CDLDescription') { 
						  usedin[widget].sort().each {   
							a(href: "${it}.html", it)
						  }
						}
					  }
					}
				  }
				}

				h4("Values") { mkp.yieldUnescaped(' ') }

				def entry = [] as Set
				attrMap.each { widget, wmap -> 
				  wmap.each { attr ->
					if (attr.name == name) { 
					  def val = attr.value
					  if (attr.type == 'Closure') val = null
					  if (val) { 
						val = decodeAttributeValue(val)
						//val?.replaceAll(';', ',')
					  }
					  entry << [widget, val, attr.type, attr.file]
					}
				  }
				}
				  
				//table{ 
				table(border: '0', cellspacing: '0', cellpadding: '0', class: 'CDescriptionList') { 
				  tbody { 
					entry.sort{ it[0] }.each { e ->
					  tr { 
						td(class: 'CDLEntry') { a(href: "${e[3]}.html", e[3]) } // file
						td(class: 'CDLDescription') { mkp.yield(e[0] ?: '') } // widget
						td(class: 'CDLDescription') { mkp.yield(e[1] ?: '') } // value
						td(class: 'CDLDescription') { mkp.yield(e[2] ?: '') } // type 
					  }
					}
				  }
				}
			  }
			}
		  }

		}

		if (!framed) { 
		  footer(footerText)
		  buildMenu(attrIndexBuilder, sections, files, 'attr-index')
		}
	  }
	}	

  }

  static getFileMap() { 
	def fileMap = [:]
	new File('test/lang').list(
	  {d, f-> f ==~ /.*-attr\.txt/ } as FilenameFilter
	).toList().each { fname -> 
	  def file = new File("test/lang/${fname}")
	  //println "Process ${fname}"
	  def widgetMap = [:]
	  def name = null
	  def set = [] as Set
	  file.eachLine { line -> 
		if (line.size() > 0) { 
		  if (line[0] != '\t') {
			if (name) { 
			  widgetMap[name] = set
			}
			name = line 
			set = widgetMap[name]
			if (set == null) { 
			  set = [] as Set
			}
		  } else if (line.indexOf('[') >= 0) { 
			def map = [:]
			line[2 .. -2].split(', ').each { 
			  int i = it.indexOf(':')
			  if (i > 0) { 
				map[it[0 .. i-1]] = it[i+1 .. -1]
			  }	      
			}
			//map['file'] = fname[0..-10]
			set.add(map)
		  }
		}
	  }
	  widgetMap[name] = set
	  fileMap[fname[0..-10]] = widgetMap
	}
	return fileMap
  }

  static getAttributesMap() { 
    def attrMap = [:]
	new File('test/lang').list(
	  {d, f-> f ==~ /.*-attr\.txt/ } as FilenameFilter
	).toList().each { fname -> 
	  def file = new File("test/lang/${fname}")
      //println "Process ${fname}"
      def name = null
      def set = [] as Set      
      file.eachLine { line -> 
		if (line.size() > 0) { 
		  if (line[0] != '\t') {
			if (name) { 
			  attrMap[name] = set
			}
			name = line
			set = attrMap[name]
			if (set == null) { 
			  set = [] as Set
			}
		  } else if (line.indexOf('[') >= 0) { 
			def map = [:]
			line[2 .. -2].split(', ').each { 
			  int i = it.indexOf(':')
			  if (i > 0) { 
				map[it[0 .. i-1]] = it[i+1 .. -1]
			  }	      
			}
			map['file'] = fname[0..-10]
			set.add(map)
		  }
		}
      }
      attrMap[name] = set
	}
    return attrMap
  }

  static buildMenu(builder, sections, files, selected = null) { 
	builder.div(id: 'Menu') {

	  // generate summary entry
	  def summaryName = framed ? 'summary' : 'index'
	  div(class: 'MEntry') { 
		if (selected == summaryName) { 
		  div(class: 'MFile', id: 'MSelected') { 
			mkp.yieldUnescaped('Summary')
		  }
		} else { 
		  div(class: 'MFile') { 
			if (framed) 
			  a(target: 'display', href: "${summaryName}.html", 'Summary')
			else 
			  a(href: "${summaryName}.html", 'Summary')
		  }
		}
	  }

	  if (widgetIndex) { 
		div(class: 'MEntry') { 
		  if (selected == 'widget-index') { 
			div(class: 'MFile', id: 'MSelected') { 
			  mkp.yieldUnescaped('Widget Index')
			}
		  } else { 
			div(class: 'MFile') { 
			  if (framed) 
				a(target: 'display', href: "widget-index.html", 'Widget Index')
			  else 
				a(href: "widget-index.html", 'Widget Index')
			}
		  }
		}
	  }

	  if (attributeIndex) { 
		div(class: 'MEntry') { 
		  if (selected == 'attr-index') { 
			div(class: 'MFile', id: 'MSelected') { 
			  mkp.yieldUnescaped('Attribute Index')
			}
		  } else { 
			div(class: 'MFile') { 
			  if (framed) 
				a(target: 'display', href: "attr-index.html", 'Attribute Index')
			  else 
				a(href: "attr-index.html", 'Attribute Index')
			}
		  }
		}
	  }

	  int scount = 1
	  sections.each { title, prefix ->
		div(class: 'MEntry') { 
		  div(class: 'MGroup') { 
			a(href: "javascript:ToggleMenu(\'MGroupContent${scount}\')", target: '_self') { 
			  mkp.yield(title) 
			}
			div(class: 'MGroupContent', id: "MGroupContent${scount}", style: 'display: block; ') { 
			  files[scount-1].each { fname ->
				div(class: 'MEntry') {
				  def param = [class: 'MFile']
				  if (fname == selected)
					param['id'] = 'MSelected'
				  div(param) {
					if (framed) 
					  a(target: 'display', href: "${fname}.html", fname)
					else 
					  a(href: "${fname}.html", fname)
				  }
				}
			  }
			}
		  }
		}
		scount++
	  }
	}
  }

  static buildPages(sections, files) { 
	int scount = 1
	sections.each { title, prefix ->
	  files[scount - 1].each { fname ->
		generateDetail(fname, sections, files)
	  }
	  scount++
	}
  }


  static prepare() { 
    def d1= new File(base + '/css')
    def d2= new File(base + '/script')
    d1.mkdirs()
    d2.mkdirs()

	// base style, to be replaced  
    //new File(base + '/css/output.css').text = new File('scripts/output.css').text

	// Natural Docs style 
    def ndJS = new File("${natural}/script").list(
      {d, f-> f ==~ /.*\.js/ } as FilenameFilter
    ).toList().each { js -> 
      new File("${base}/script/${js}").text = new File("${natural}/script/${js}").text
    }
    def ndCSS = new File("${natural}/style").list(
      {d, f-> f ==~ /.*\.css/ } as FilenameFilter
    ).toList().each { css -> 
      new File("${base}/css/${css}").text = new File("${natural}/style/${css}").text
    }
	
    // syntax highlighter
    def syntaxJS = new File(syntax).list(
      {d, f-> f ==~ /.*\.js/ } as FilenameFilter
    ).toList().each { js -> 
      new File("${base}/script/${js}").text = new File("${syntax}/${js}").text
    }
    def syntaxCSS = new File(syntax).list(
      {d, f-> f ==~ /.*\.css/ } as FilenameFilter
    ).toList().each { css -> 
      new File("${base}/css/${css}").text = new File("${syntax}/${css}").text
    }
    def syntaxPNG = new File(syntax).list(
      {d, f-> f ==~ /.*\.png/ } as FilenameFilter
    ).toList().each { png -> 
      new File("${base}/css/${png}").bytes = new File("${syntax}/${png}").bytes
    }

  }

  static generateDetail(fname, sections, files) { 
	String htmlName = fname 
	String userConf = 'org'
	boolean designOpt = false 
	if (fname.endsWith('+Option')) { 
	  fname = fname[0..-8]
	  designOpt = true
	  if (fname == 'Widgets') 
		userConf = 'org-radiogroup'
	  else if (fname == 'EuropeanCountries')
	    userConf = 'org-expandable'
	} else if (fname.startsWith('TipCalculator')) { 
	  userConf = 'org2'
	}
	  
    def detailFile = new FileWriter("${base}/${htmlName}.html")
	def detailBuilder = new NDBuilder(detailFile)    
    detailBuilder.html { 
	  ndhead(pageTitle + " -- App ${htmlName}", ['groovy'])
	  ndbody(framed) { 
		div(id: 'Content') { 
		  String namePat = htmlName.replaceAll('\\+', '\\\\+') + '(_[0-9]*)?.png'
		  def iosFiles = new File("${testdir}/${iOSOutput}").list(
			{d, f-> f ==~ namePat } as FilenameFilter
		  ) 
		  def androidFiles = new File("${testdir}/${androidOutput}").list(
			{d, f-> f ==~ namePat } as FilenameFilter
		  ) 
		  boolean hasScreenshots = iosFiles || androidFiles

		  def opt = designOpt ? 'DesignOpt/' : ''
		  def iosgen = new File("${iOSCode}/${opt}${fname}")
		  def androidgen = new File("${androidCode}/${opt}${fname}")
		  boolean hasGenCode = (iosgen.exists() || androidgen.exists())

		  ndtopic("Application ${htmlName}", "${htmlName}", 1) { 
			div(class: 'TOC') { 
			  a(href: '#model', 'Model Definition')
			  a(href: '#config', 'Configuration')

			  if (hasScreenshots) { 
				mkp.yieldUnescaped(' &middot; ')
				a(href: '#screenshots', 'Screenshots')
				mkp.yieldUnescaped(' (')
				if (iosFiles)
				  a(href: '#screenshots-ios', 'iOS')
				if (iosFiles && androidFiles)
				  mkp.yieldUnescaped(' &middot; ')
				if (androidFiles)
				  a(href: '#screenshots-android', 'Android')
				mkp.yieldUnescaped(')')
			  }

			  if (hasGenCode) { 
				mkp.yieldUnescaped(' &middot; ')
				a(href: '#gencode', 'Generated Code')
				mkp.yieldUnescaped(' (')
				a(href: '#gencode-ios', 'iOS')
				mkp.yieldUnescaped(' &middot; ')
				a(href: '#gencode-android', 'Android')
				mkp.yieldUnescaped(')')
			  }
			}
		  }

		  ndtopic("Model Definition", "model", 2) { 
			mkp.yield("Model definition file: ${fname}.madl")

			div(class: 'code'){ 
			  script(type: 'syntaxhighlighter', class: 'brush: groovy-m, tab-size: 4, toolbar: true', title: "${fname}.madl") { 
				mkp.yieldUnescaped('<![CDATA[' + 
								   new File("${testdir}/${fname}.madl").text + 
								   ']]>')
			  }
			  script(type: 'text/javascript') { 
				mkp.yieldUnescaped('SyntaxHighlighter.all();')
			  }
			}
		  }

		  ndtopic("Configuration", "config", 2) { 

			mkp.yield("Configuration file: ${userConf}.conf")
			div(class: 'code'){ 
			  script(type: 'syntaxhighlighter', class: 'brush: groovy-m, tab-size: 4, toolbar: true', title: "${userConf}.conf") { 
				mkp.yieldUnescaped('<![CDATA[' + 
								   new File("${testdir}/${userConf}.conf").text + 
								   ']]>')
			  }
			  script(type: 'text/javascript') { 
				mkp.yieldUnescaped('SyntaxHighlighter.all();')
			  }
			}
		  }

		  if (hasScreenshots) { 
			ndtopic("Screenshots", "screenshots", 2, null)
		  } // screenshots

		  if (iosFiles) { 
			boolean plural = iosFiles.size() > 1
			ndtopic("Screenshot${plural ? 's' : ''}: iOS", "screenshots-ios", 3) { 
			  div(class: 'SBorder') { 
				iosFiles.toList().each { f -> 
				  image(src: "../${iOSOutput}/${f}", width: 320)
				}
			  }
			}		   
		  }

		  /*
			sort { a,b ->
				  def n1 = (a.toString() =~ /\d+/)[-1] as Integer
				  def n2 = (b.toString() =~ /\d+/)[-1] as Integer

				  def s1 = a.toString().replaceAll(/\d+$/, '').trim()
				  def s2 = b.toString().replaceAll(/\d+$/, '').trim()

				  if (s1 == s2){
					return n1 <=> n2
				  } else { 
					return s1 <=> s2
				  }
				}
		   */

		  if (androidFiles) { 
			boolean plural = androidFiles.size() > 1
			ndtopic("Screenshot${plural ? 's' : ''}: Android", "screenshots-android", 3) { 
			  div(class: 'SBorder') { 
				androidFiles.toList().each { f -> 
				  image(src: "../${androidOutput}/${f}", width: 320)
				}
			  }
			}
		  }

		  if (hasGenCode) { 
			ndtopic("Generated Code", "gencode", 2, null)
		  }

		  if (iosgen.exists()) { 
			ndtopic("Platform: iOS", "gencode-ios", 3) { 
			  //def files = iosgen.list().toList()
			  def iosFileList = []
			  def iosSrcFile = "${fname}_ios.html"
			  iosFileList.sort { it.name }
			  visitFiles(detailBuilder, "${iOSCode}/${opt}${fname}", null, iosSrcFile, iosFileList)
			  generateSource('iOS', iosSrcFile, iosFileList, fname, sections, files)
			}
		  }

		  if (androidgen.exists()) { 
			ndtopic("Platform: Android", "gencode-android", 3) { 
			  //def files = androidgen.list().toList()
			  def androidFileList = []
			  def androidSrcFile = "${fname}_android.html"
			  androidFileList.sort { it.name }
			  visitFiles(detailBuilder, "${androidCode}/${opt}${fname}", null, androidSrcFile, androidFileList)
			  generateSource('Android', androidSrcFile, androidFileList, fname, sections, files)
			}
		  }
		}

		if (!framed) { 
		  footer(footerText)
		  buildMenu(detailBuilder, sections, files, htmlName)
		}

      } // body 
      
    }
    detailFile.close()
  }

  static visitFiles(builder, parent, fname, srcfile, fileList) { 
    def file = new File(fname ? "${parent}/${fname}" : parent)
    if (file.directory) { 
      if (fname?.endsWith('.xcodeproj')) { 
		if (fname) { 
		  builder.li("Xcode project file: ${parent}/${fname}")
		} else { 
		  builder.div("Xcode project file: ${parent}")
		}
      } else { 
		if (fname) { 
		  builder.li("Directory: ${parent}/${fname}")
		} else { 
		  builder.div("Directory: ${parent}")
		}
		def files = file.list().toList().sort()
		if (files) { 
		  builder.ul { 
			files.each { f -> 
			  visitFiles(builder, fname ? "${parent}/${fname}" : parent, f, srcfile, fileList)
			}
		  }
		}
      }
    } else { 
      if (fname) { 
		def entry = null
		if (fname.endsWith('.xml') && fname != 'build.xml' || 
			fname.endsWith('.h') || fname.endsWith('.m') || fname.endsWith('.java')) { 
		  entry = [ name: fname, fullname: "${parent}/${fname}", file: file ]
		}
		if (entry) { 
		  builder.li { 
			mkp.yield('File: ')
			a(href: "${srcfile}#${fname}") { 
			  mkp.yield("${parent}/${fname}")
			}
		  }
		  fileList << entry
		} else { 
		  builder.li("File: ${parent}/${fname}")
		}
      } else { 
		builder.div("File: ${parent}")
      }
    }
  }

  static generateSource(platform, srcFileName, fileList, modelFileName, sections, files) { 
    def srcFile = new FileWriter("${base}/${srcFileName}")
	def srcBuilder = new NDBuilder(srcFile)    
    srcBuilder.html { 
	  ndhead(pageTitle + " -- Source Code for App ${modelFileName}", ['groovy', 'java', 'objc', 'xml'])
	  ndbody(framed) { 
		div(id: 'Content') { 
		  ndtopic("Generated Code for ${platform} Platform", "${srcFileName}", 1, null)

		  fileList.each { entry -> 
			ndtopic(entry.name, entry.name, 3) { 
			  div(class: 'code'){ 
				script(type: 'syntaxhighlighter', class: 'brush: ' + brushName(entry.name) + ', tab-size: 4', 
					   title: entry.fullname) { 
				  mkp.yieldUnescaped('<![CDATA[' + entry.file.text + ']]>')
				}
			  }
			}
		  }
		}

		if (!framed) { 
		  footer(footerText)
		  buildMenu(srcBuilder, sections, files, modelFileName)
		}

		script(type: 'text/javascript') { 
		  mkp.yieldUnescaped('SyntaxHighlighter.all()')
		}
      } // body
    }
    srcFile.close()
  }

  static brushName(fileName) { 
    if (fileName) { 
      if (fileName.endsWith('.xml')) { 
		return 'xml'
      } else if (fileName.endsWith('.m') || fileName.endsWith('.h')) { 
		return 'objc'
      } else if (fileName.endsWith('.java')) { 
		return 'java'
      }
    }
    return 'text'
  }

}